/**************************************************************************************************
                                        GRADLE RUNNABLES
 *************************************************************************************************/

/*
*   @author: marshallbradley93@gmail.com
*
*   This Gradle script contains common build logic in the form of runnables (both tasks and methods).
*   These methods are dispatched to the relevant project files via either local or remote.gradle.
*
*   @TODO: Convert to custom Gradle plugin
*/

/**************************************************************************************************
                                            METHODS
 *************************************************************************************************/

// Check which test types (unit-test, androidtest) have been implemented
def listTests() {

    def availiableTests = []
    def testFolder = new File("${buildDir.parent}/src/test")
    def androidTestFolder = new File("${buildDir.parent}/src/androidTest")

    // Check unit-test location exists
    if (testFolder.exists()) {
        availiableTests.add("testDebugUnitTest")
    }

    // Check androidtest location exists
    if (androidTestFolder.exists()) {
        availiableTests.add("connectedDebugAndroidTest")
    }

    // Return a list of test types that have been implemented
    return availiableTests
 }

 // List locations of available generated JaCoCo files
 def  listTestFiles() {

    description = "Merge code coverage files from all available test types"

    def testFiles = [];
    def testFolder = new File("${buildDir.parent}/src/test")
    def androidTestFolder = new File("${buildDir.parent}/src/androidTest")

    // Check unit-test location exists
    if (testFolder.exists()) {
       testFiles.add("${buildDir}/jacoco/testDebugUnitTest.exec")
    }

    // Check androidtest location exists
    if (androidTestFolder.exists()) {
        testFiles.add("${buildDir}/outputs/code-coverage/connected/coverage.ec")
    }

    // Return list of file locations
    return testFiles;
 }

/**************************************************************************************************
                                            TASKS
 *************************************************************************************************/
// produces a composite code coverage report (vs. Android Studio's androidTest-only coverage)
task jacocoCoverageReport(type: JacocoReport) {

    // combine the unit test and android test coverage files
    executionData = files(listTestFiles())

    // Include only relevant .class files
    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class'
                       , '**/R$*.class'
    , '**/BuildConfig.*'
                       , '**/*$ViewInjector*.*'
                       , '**/Manifest*.*'
                       , '**/*_*' // generated by androidannotaions
                       , '**/*InjectAdapter.class', '**/*ModuleAdapter*.class' // generated by dagger
                       , '**/database/provider/*' // generated database handling
                       ]
    )

    sourceDirectories = files("${buildDir.parent}/src/main/java") // Set src directories

    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])

    // Set report output configuration
    reports {
        xml {
            enabled = true
            destination "${project.buildDir}/reports/jacoco/jacoco.xml"
        }
        html {
            enabled = true
            destination "${project.buildDir}/reports/jacoco"
        }
    }

}

 // Define the snapshot version to be the git hash
task generateSnapshotVersion {
    def gitHash = new ByteArrayOutputStream()
    def date = (new Date()).format('yyyyMMddHHmm')
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = gitHash
    }
    doLast {
        // Package the snapshot version into an external object
        project.ext.snapshotVersionCode = 'b' + date + '_v' + gitHash.toString().trim()
    }
}

// Set the version to release (required by Artifactory)
task releaseVersion << {
    version = releaseVersionCode
}

// Set the version to snapshot (required by Artifactory)
task snapshotVersion(dependsOn: "generateSnapshotVersion") << {
    version = snapshotVersionCode
}
